<?php/** * Created by PhpStorm. * User: dingo * Date: 13/04/2019 * Time: 02:23 */namespace App\Models;use Illuminate\Database\Eloquent\Model;use Illuminate\Database\Eloquent\SoftDeletes;use Illuminate\Support\Facades\DB;use function Qiniu\time;class LikeModel extends Model{    use SoftDeletes;    protected $table = "tz_like";    public $primaryKey = 'id';    protected $dates = ['deleted_at'];    public $timestamps = true;    // banner 状态    const LIKE = 1;  // 点赞    const COLLECT = 2;  // 收藏    const PRODUCT = 1; // 设备    const CASE = 2; // 案例    /**     * 修改时间是时间戳格式     */    public function fromDateTime($value){        return strtotime(parent::fromDateTime($value));    }    /**     * 获取用户 操作     *     * @param int user_id     * @param int type     * @param int $entry_type     *     * @return array     */    public static function userOpera($user_id, $type, $entry_type = 0){        $where = ['type' => $type, 'user_id'];        if($entry_type) $where['$entry_type'] = $entry_type;        return self::query()            ->where($where)            ->orderBy('id', 'desc')            ->get();    }    /**     * 点赞 收藏     *     * @param int user_id     * @return bool     */    public static function opera($user_id, $type, $entry_type, $entry_id){        if(!in_array($entry_type, [self::PRODUCT, self::CASE])) {            throw new \Exception('只能对产品和案例点赞', 601);        }        if(!in_array($type, [self::LIKE, self::COLLECT])) {            throw new \Exception('类型错误', 602);        }        if($opera = self::checkOpera($user_id, $entry_type, $entry_id, $type, true)) {            self::unOpera($opera);        }else{            self::doOpera($user_id, $entry_type, $entry_id, $type);        }        return true;    }    /**     * 检查 用户是否点赞     *     * @param int user_id     * @param int entry_type     * @return bool     */    public static function checkOpera($user_id, $entry_type, $entry_id, $type, $object = false){        if($entry_type == self::PRODUCT) {            if(!ProductModel::find($entry_id)) {                throw new \Exception('产品不存在', 604);            }        }else{            if(!CaseModel::query()->find($entry_id)) {                throw new \Exception('案例不存在', 604);            }        }        $where = [            'user_id' => $user_id,            'entry_type' => $entry_type,            'entry_id' => $entry_id,            'type' => $type        ];        $res = self::query()            ->where($where)            ->orderBy('id', 'desc')            ->first();        if($object) return $res;        return $res ? 1 : 0;    }    /**     * 点赞 收藏     */    private static function doOpera($user_id, $entry_type, $entry_id, $type){        $data = [            'user_id' => $user_id,            'entry_type' => $entry_type,            'entry_id' => $entry_id,            'type' => $type        ];        DB::transaction(function () use ($data, $entry_id, $entry_type, $type){            // 添加到记录表            self::insert($data);            // 实体表点赞 收藏数 数加1            if($entry_type == self::PRODUCT){                $product = ProductModel::find($entry_id);                if($type == self::LIKE){                    $product->like_count = (int)($product->like_count) + 1;                }                if($type == self::COLLECT) {                    $product->collect_count = (int)($product->collect_count) + 1;                }                $product->save();            }            if($entry_type == self::CASE) {                $case = CaseModel::find($entry_id);                if($type == self::LIKE){                    $case->like_count = $case->like_count + 1;                }                if($type == self::COLLECT) {                    $case->collect_count = $case->collect_count + 1;                }                $case->save();            }        }, 3);        return true;    }    /**     * 取消点赞 收藏     */    private static function unOpera($opera){        DB::transaction(function () use ($opera){            // 添加到记录表            $opera->deleted_at = \time();            $opera->save();            // 实体表点赞 收藏数 数 减1            if($opera->entry_type == self::PRODUCT){                $product = ProductModel::find($opera->entry_id);                if($opera->type == self::LIKE){                    $product->like_count = (int)($product->like_count) - 1;                }                if($opera->type == self::COLLECT) {                    $product->collect_count = (int)($product->collect_count) - 1;                }                $product->save();            }            if($opera->entry_type == self::CASE) {                $case = CaseModel::find($opera->entry_id);                if($opera->type == self::LIKE){                    $case->like_count = $case->like_count - 1;                }                if($opera->type == self::COLLECT) {                    $case->collect_count = $case->collect_count - 1;                }                $case->save();            }        }, 3);        return true;    }    /**     * 收藏 点赞列表     */    public static function getLikeList($user_id, $type){        $res = self::query()->where('user_id', $user_id)            ->where('type', $type)            ->orderByDesc('id')            ->get();        if($res) {            $res = $res->toArray();        }else{            $res = [];        }        foreach ($res as &$value) {            if($value['entry_type'] == self::PRODUCT) {                $value['entry'] = ProductModel::detailOne($value['entry_id']);            }else {                $value['entry'] = CaseModel::detailOne($value['entry_id'], $value['user_id']);            }        }        return $res;    }    /**     * 删除产品     */    public static function deletedpro($entry_id, $entry_type){        return self::where('entry_id', $entry_id)->where('entry_type', $entry_type)->update(['deleted_at' => \time()]);    }}