<?php/** * Created by PhpStorm. * User: dingo * Date: 13/04/2019 * Time: 02:23 */namespace App\Models;use Illuminate\Database\Eloquent\Model;use Illuminate\Database\Eloquent\SoftDeletes;use function Qiniu\json_decode;class CaseModel extends Model{    use SoftDeletes;    protected $table = "tz_case";    public $primaryKey = 'id';    protected $dates = ['deleted_at'];    public $timestamps = true;    const SHOW = 1;    const HIDDEN = 0;    const PAGE_SIZE = 10;    public static $is_hot = [0 => '否', 1 => '是'];  // 是否推荐    const HOT = 1; // 推荐    const NOT_HOT = 0; // 普通    /**     * 保存图片处理     */    public function setImagesAttribute($image)    {        if (is_array($image)) {            $this->attributes['images'] = json_encode($image);        }    }    /**     * 读取图片处理     */    public function getImagesAttribute($image)    {        return json_decode($image, true);    }    /**     * 标签字段修改     */    public function setLabelIdAttribute($label_id)    {        if(is_array($label_id)){            $this->attributes['label_id'] = implode(',', $label_id);        }    }    /**     * 处理文本     */    public function getDetailAttribute($value)    {        $url = explode('/', \Request::getRequestUri());        if($url[1] != 'admin'){            return str_replace("/storage/", env('APP_URL') . "/storage/", $value);        }        return $value;    }    /**     * 处理文本     */    public function getInformationAttribute($value)    {        $url = explode('/', \Request::getRequestUri());        if($url[1] != 'admin'){            return str_replace("/storage/", env('APP_URL') . "/storage/", $value);        }        return $value;    }    /**     * 修改时间是时间戳格式     */    public function fromDateTime($value){        return strtotime(parent::fromDateTime($value));    }    protected static function boot()    {        parent::boot();        static::deleting(function($case) {            LikeModel::deletedpro($case->id, 2);        });    }    /**     * 产品搜索     *     * @param string keyword     * @return array     */    public static function search($keyword, $user_id){        return self::deal(self::query()            ->where('status', self::SHOW)            ->where('name', 'like', '%' . $keyword . '%')            ->orderByDesc('wight')            ->orderByDesc('id')            ->limit(self::PAGE_SIZE)            ->get()->toArray(), $user_id);    }    /**     * 详情     */    public static function detailOne($id, $user_id){        $data = self::query()->find($id);        if($data) {            $data = $data->toArray();        }else{            return [];        }        $label = LabelModel::_label();        $type = TypeModel::_type();        // 标签        if(isset($data['label_id']) && $data['label_id']) {            $label_ids = explode(',', $data['label_id']);            foreach ($label_ids as $label_id){                $data['label'][$label_id] = $label[$label_id] ?? '';            }        }        // 类型        if(isset($data['type_id'])) {            $data['type'] = $type[$data['type_id']] ?? '';        }        // 当前用户是否点赞        $data['is_like'] = LikeModel::checkOpera($user_id, LikeModel::CASE, $data['id'], LikeModel::LIKE);        // 当前用户是否收藏        $data['is_collect'] = LikeModel::checkOpera($user_id, LikeModel::CASE, $data['id'], LikeModel::COLLECT);        // img 地址        if(isset($data['images']) && $data['images']) {            foreach ($data['images'] as &$image){                $image = env('QN_URL') . $image;            }        }        // 封面图地址        if(isset($data['cover_image']) && $data['cover_image']) {            $data['cover_image'] = env('QN_URL') . $data['cover_image'];        }        return $data;    }    /**     * 获取推荐数据     */    public static function forList($label_id, $user_id){        return self::deal(self::query()            ->where('status', self::SHOW)            ->where('label_id', 'like', '%' . $label_id . '%')            ->where('is_hot', self::HOT)            ->orderByDesc('wight')            ->orderByDesc('like_count')            ->orderByDesc('collect_count')            ->orderByDesc('updated_at')            ->limit(3)            ->get()->toArray(), $user_id);    }    /**     * 获取列表数据     */    public static function getList($label_id, $user_id)    {        return self::deal(self::query()            ->where('status', self::SHOW)            ->where('label_id', 'like', '%' . $label_id . '%')            ->orderByDesc('wight')            ->orderByDesc('updated_at')            ->get()->toArray(), $user_id);    }    /**     * 字段处理     */    private static function deal($data, $user_id){        if(!$data) return [];        $label = LabelModel::_label();        $type = TypeModel::_type();        foreach ($data as &$value){            // 标签            if(isset($value['label_id']) && $value['label_id']) {                $label_ids = explode(',', $value['label_id']);                foreach ($label_ids as $label_id){                    $value['label'][$label_id] = $label[$label_id] ?? '';                }            }            // 类型            if(isset($value['type_id'])) {                $value['type'] = $type[$value['type_id']] ?? '';            }            // 当前用户是否点赞            $value['is_like'] = LikeModel::checkOpera($user_id, LikeModel::CASE, $value['id'], LikeModel::LIKE);            // 当前用户是否收藏            $value['is_collect'] = LikeModel::checkOpera($user_id, LikeModel::CASE, $value['id'], LikeModel::COLLECT);            // img 地址            if(isset($value['images']) && $value['images']) {                foreach ($value['images'] as &$image){                    $image = env('QN_URL') . $image;                }            }            // 封面图地址            if(isset($value['cover_image']) && $value['cover_image']) {                $value['cover_image'] = env('QN_URL') . $value['cover_image'];            }        }        return $data;    }}